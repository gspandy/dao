<%@ jet package="com.porpoise.dao.generator.templates" imports="java.util.* com.porpoise.dao.generator.gen.*" class="SqlTemplate"  
skeleton="generator.skeleton" %><% final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>
package <%= ctxt.getPackageName() %>;

import <%= ctxt.getPackageName() %>.model.<%= n%>Dto;
import <%= ctxt.getPackageName() %>.model.<%= n%>Metadata;

import com.porpoise.dao.database.metadata.Field;
import com.google.common.base.Strings;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;


/**
 * Class used to encapsulate the SQL required for interacting with an underlying relational database for <%= n %> object
 */
public class <%= n %>Sql
{
    ;// uninstantiable

    private static final String TABLE_NAME = "<%=ctxt.getTableName() %>";

    /**
     * @return a comma-separated list of <%= n %> attributes in string form 
     */
    public static String attributeListAsString(final String alias)
    {
        return Field.asAttributeList(alias, <%= n %>Metadata.FIELDS);
    }
    
    /**
     * @return the <%= n %> attributes in a comma-separated &quot;KEY-N=?&quot; form  
     */
    public static String attributeListAsUpdateString(final String alias)
    {
        return Field.asUpdateList(alias, <%= n %>Metadata.FIELDS);
    }

<% if (ctxt.hasIdField()) { %>
    /**
     * @return the 'WHERE' clause for retrieving a <%= n %> object by ID
     */
    public static String byId()
    {
        return by(<%= n %>Metadata.ID_FIELD);
    }
<% } %>

    public static String createTable()
    {
        return String.format("CREATE TABLE %s ", TABLE_NAME);
    }

    /**
     * @return the 'WHERE' clause for retrieving a <%= n %> object by its given field property
     */
    public static String by(final Field<?> field)
    {
        return String.format("%s WHERE %s=?", select(), field.getName());
    }

    /**
     * @return the 'INSERT' SQL used to create a new <%= n %> entry
     */
    public static String insert()
    {
        final String propertyPlaceholders = Strings.repeat("?,", <%= n %>Metadata.FIELDS.size() - 1) + "?";
        return String.format("INSERT INTO %s (%s) VALUES (%s)", TABLE_NAME, attributeListAsString(null), propertyPlaceholders);
    }

    /**
     * @return the 'UPDATE' SQL used to create a new <%= n %> entry
     */
    public static String update()
    {
        return String.format("UPDATE %s SET %s", TABLE_NAME, attributeListAsUpdateString(null));
    }

    /**
     * @return the 'SELECT' SQL for querying the database
     */
    public static String select()
    {
        return select(null);
    }

    /**
     * @return the 'SELECT' SQL for querying the database using the given alias for the table entry
     */
    public static String select(final String alias)
    {
        return String.format("SELECT %s FROM %s", attributeListAsString(alias), TABLE_NAME);
    }
    
}
