<%@ jet package="com.porpoise.dao.generator.templates" imports="com.porpoise.generator.* java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.* com.porpoise.generator.model.*" class="SqlTemplate"  
skeleton="generator.skeleton" %><% final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>
package <%= ctxt.getPackageName() %>;

import <%= ctxt.getPackageName() %>.model.<%= n%>Dto;
import <%= ctxt.getPackageName() %>.model.<%= n%>Metadata;

import com.porpoise.dao.database.metadata.Field;
import static com.google.common.base.Strings.*;
import com.google.common.base.Function;
import com.google.common.collect.MapMaker;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.ConcurrentMap;
import java.util.List;
import java.util.Map;


/**
 * Class used to encapsulate the SQL required for interacting with an underlying relational database for <%= n %> object
 */
public class <%= n %>Sql
{
    private static final String TABLE_NAME = "<%=ctxt.getTableName() %>";

    // cached (computing) maps for query strings
    private static final ConcurrentMap<String, String> attributeListAsStringMap;
    private static final ConcurrentMap<String, String> attributeListAsUpdateStringMap;
    private static final ConcurrentMap<String, String> selectByAliasMap;

	static {
		attributeListAsStringMap = new MapMaker().initialCapacity(3)
				.makeComputingMap(new Function<String, String>() {
					@Override
					public String apply(final String aliasParam) {
					    assert aliasParam != null : "alias was null";
					    final String alias = emptyToNull(aliasParam);
						return Field.asAttributeList(alias,
								<%= n %>Metadata.FIELDS);
					}
				});

		attributeListAsUpdateStringMap = new MapMaker().initialCapacity(3)
				.makeComputingMap(new Function<String, String>() {
					@Override
					public String apply(final String aliasParam) {
					    assert aliasParam != null : "alias was null";
					    final String alias = emptyToNull(aliasParam);
						return Field.asUpdateList(alias, <%= n %>Metadata.FIELDS);
					}
				});
		selectByAliasMap = new MapMaker().initialCapacity(3).makeComputingMap(
				new Function<String, String>() {
					@Override
					public String apply(final String aliasParam) {
					    assert aliasParam != null : "alias was null";
					    final String alias = emptyToNull(aliasParam);
						return String.format("SELECT %s FROM %s %s",
								attributeListAsString(alias), TABLE_NAME,
								aliasParam);
					}
				});
	}

    /**
     * @return a comma-separated list of <%= n %> attributes in string form 
     */
    public static String attributeListAsString(final String alias)
    {
        // allow null aliases as null has a meaning
        return attributeListAsStringMap.get(nullToEmpty(alias));
    }
    
    /**
     * @return the <%= n %> attributes in a comma-separated &quot;KEY-N=?&quot; form  
     */
    public static String attributeListAsUpdateString(final String alias)
    {
        // allow null aliases as null has a meaning
        return attributeListAsUpdateStringMap.get(nullToEmpty(alias));
    }

<% if (ctxt.hasIdField()) { %>
    /**
     * @return the 'WHERE' clause for retrieving a <%= n %> object by ID
     */
    public static String byId()
    {
        return by(<%= n %>Metadata.ID_FIELD);
    }

    /**
     * @return a query which will return the max id
     */
	public static String selectMaxId() {
		return String.format("SELECT MAX(<%= ctxt.getIdField().getName() %>) FROM %s", TABLE_NAME);
	}
	
    /**
     * @return a query which will return the number of rows in the database for the given table
     */
	public static String selectCount() {
		return String.format("SELECT COUNT(<%= ctxt.getIdField().getName() %>) FROM %s", TABLE_NAME);
	}
	
    /**
     * @return a query which will return the max id
     */
	public static String selectId() {
		return String.format("SELECT <%= ctxt.getIdField().getName() %> FROM %s", TABLE_NAME);
	}
<% } %>

<% for (final Reference r : ctxt.getReferencesToThisTable()) { 
final Column from = ctxt.resolveColumn(r.getFrom());
final Column pk = ctxt.resolvePrimaryKey(from);
final String id = pk.getNameAsJava();

%>

    /**
     * Relationship: <%= r %>
     * <%= r.getFrom() %> => <%= from %>
     * pk is <%= pk %>
     * id is table (<%= pk.getTable() %>) + Id
     */
    public static String findBy<%= id %>()
    {
        final String select = select("a");
        final StringBuilder querySql = new StringBuilder(select);
        querySql.append(", <%=  r.getFrom().getTable().getTableName() %> b ");
        
<% if (r.getCardinality() == Cardinality.ManyToMany) { %>
        querySql.append("WHERE b.<%= r.getFrom().getName() %>=a.<%= r.getTo().getName() %> ");
<% } else { %> 
        querySql.append("WHERE b.<%= from.getName() %>=a.<%= r.getTo().getName() %> ");
<% } // end if %>
        querySql.append("AND b.<%= pk.getName() %>=?");
        final String sql = querySql.toString();
        return sql;
    }

<% } // end for %>


    /**
     * @return the 'WHERE' clause for retrieving a <%= n %> object by its given field property
     */
    public static String by(final Field<?> field)
    {
        return String.format("%s WHERE %s=?", select(), field.getName());
    }

    /**
     * @return the 'INSERT' SQL used to create a new <%= n %> entry
     */
    public static String insert()
    {
        final String propertyPlaceholders = repeat("?,", <%= n %>Metadata.FIELDS.size() - 1) + "?";
        return String.format("INSERT INTO %s (%s) VALUES (%s)", TABLE_NAME, attributeListAsString(null), propertyPlaceholders);
    }

    /**
     * @return the 'UPDATE' SQL used to create a new <%= n %> entry
     */
    public static String update()
    {
        return String.format("UPDATE %s SET %s", TABLE_NAME, attributeListAsUpdateString(null));
    }

    /**
     * @return the 'SELECT' SQL for querying the database
     */
    public static String select()
    {
        return select(null);
    }

    /**
     * @return the 'SELECT' SQL for querying the database using the given alias for the table entry
     */
    public static String select(final String alias)
    {
        return selectByAliasMap.get(nullToEmpty(alias));
    }
    
}
