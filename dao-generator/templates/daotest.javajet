<%@ jet package="com.porpoise.dao.generator.templates" imports="com.porpoise.generator.* java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.*" class="DaoTestTemplate" 
skeleton="generator.skeleton" %><% 
final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>
package <%= ctxt.getPackageName() %>;

import <%= ctxt.getPackageName() %>.model.*;

import java.io.File;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Collection;
import java.util.List;

import <%= ctxt.getPackageName() %>.model.<%= n %>Dto;

import org.junit.Assert;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.google.common.collect.Iterables;
import com.porpoise.dao.database.DbConnectionDetails;
import com.porpoise.dao.database.DbConnectionFactory;
import com.porpoise.dao.database.IDbTransaction;
import com.porpoise.dao.database.init.Databases;


/**
 * Tests for the <%= n %>Dao class
 */
public class <%= n %>DaoTest extends AbstractDaoTest
{
    /**
     * test the DAO can create and find an entry 
     */
    @Test
    public void test_listAll()
    {
        final Collection<<%= n %>Dto> values = new <%= n %>Dao().listAll(getTransaction());
        for (final <%= n %>Dto value : values)
        {
            println(value);
        }
 
        Assert.assertFalse(values.isEmpty());
    }

<% for (final Reference r : ctxt.getReferencesToThisTable()) {



final Column col = ctxt.resolveColumn(r.getFrom());
final Column pk = ctxt.resolvePrimaryKey(col);
final String id = pk.getTable().getJavaName() + "Id";
final String methodName = "findBy" + pk.getNameAsJava();

%>

    /**
     * data-dependent test for the <%= methodName %> method
     */
    @Test
    public void test_<%= methodName %>()
    {
<%
        final String fromTable = col.getTable().getJavaName();
%>
		final <%= n %>Dao dao = new <%= n %>Dao();
		final Collection<<%= fromTable %>Dto> all = new <%= fromTable %>Dao()
				.listAll(getTransaction());
				
		final Integer id = Iterables.getLast(all).<%= pk.getNameAsAccessor() %>();
		final Collection<<%= n %>Dto> results = dao.<%= methodName %>(getTransaction(), id);

		Assert.assertFalse(results.isEmpty());
    }
<% } %>

<% if (ctxt.hasIdField()) { %>
    /**
     * test the DAO can create and find an entry 
     */
    @Test
    public void test_createAndFindById()
    {
        // create the DAO to test
        final <%= n %>Dao dao = new <%= n %>Dao();
         
        final <%= ctxt.getIdField().getJavaTypeName() %> id = dao.nextId(getTransaction());

        // create an entry to find
        final <%= n %>Dto dto = new <%= n %>Dto(<%= ctxt.getTestValues() %>);
 
        dao.insert(getTransaction(), dto);

        // call the method under test - find our new entry        
        final <%= n %>Dto read = dao.findById(getTransaction(), id);
        Assert.assertEquals(dto, read);
        Assert.assertEquals(dto.hashCode(), read.hashCode());
    }

    /**
     * test the DAO can update an entry 
     */
    @Test
    public void test_update()
    {
        final <%= n %>Dao dao = new <%= n %>Dao();
        final <%= ctxt.getIdField().getJavaTypeName() %> id = dao.nextId(getTransaction());
        
        // create an entry to find
        final <%= n %>Dto dto = new <%= n %>Dto(<%= ctxt.getTestValues() %>);
 
        dao.insert(getTransaction(), dto);

        // find our new entry        
        final <%= n %>Dto read = dao.findById(getTransaction(), id);
        Assert.assertEquals(dto, read);
        Assert.assertEquals(dto.hashCode(), read.hashCode());
    }
<% } // end if has id  %>
}