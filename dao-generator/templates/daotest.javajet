<%@ jet package="com.porpoise.dao.generator.templates" imports="java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.*" class="DaoTestTemplate" 
skeleton="generator.skeleton" %><% 
final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>
package <%= ctxt.getPackageName() %>;

import java.io.File;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Collection;
import java.util.List;

import <%= ctxt.getPackageName() %>.model.<%= n %>Dto;

import org.junit.Assert;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.porpoise.dao.database.DbConnectionDetails;
import com.porpoise.dao.database.DbConnectionFactory;
import com.porpoise.dao.database.IDbTransaction;
import com.porpoise.dao.database.init.Databases;


/**
 * Tests for the <%= n %>Dao class
 */
public class <%= n %>DaoTest extends AbstractDaoTest
{
    /**
     * test the DAO can create and find an entry 
     */
    @Test
    public void test_listAll()
    {
        final Collection<<%= n %>Dto> values = new <%= n %>Dao().listAll(getTransaction());
        for (final <%= n %>Dto value : values)
        {
            System.out.println(value);
        }
 
        Assert.assertFalse(values.isEmpty());
    }

<% if (ctxt.hasIdField()) { %>
    /**
     * test the DAO can create and find an entry 
     */
    @Test
    public void test_createAndFindById()
    {
        // create an entry to find
        final <%= n %>Dto dto = new <%= n %>Dto(<%= ctxt.getTestValues() %>);
 
        final <%= n %>Dao dao = new <%= n %>Dao(); 
        dao.insert(getTransaction(), dto);

        // find our new entry        
        final <%= n %>Dto read = dao.findById(getTransaction(), <%= ctxt.getIdField().getJavaTypeName() %>.valueOf(1));
        Assert.assertEquals(dto, read);
    }

    /**
     * test the DAO can update an entry 
     */
    @Test
    public void test_update()
    {
        // create an entry to find
        final <%= n %>Dto dto = new <%= n %>Dto(<%= ctxt.getTestValues() %>);
 
        final <%= n %>Dao dao = new <%= n %>Dao(); 
        dao.insert(getTransaction(), dto);

        // find our new entry        
        final <%= n %>Dto read = dao.findById(getTransaction(), <%= ctxt.getIdField().getJavaTypeName() %>.valueOf(1));
        Assert.assertEquals(dto, read);
    }
<% } // end if has id  %>
}