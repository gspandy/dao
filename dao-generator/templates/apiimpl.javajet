<%@ jet package="com.porpoise.dao.generator.templates" imports="com.porpoise.generator.* java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.*" class="DaoApiImplTemplate" 
skeleton="generator.skeleton" %><% final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>
package <%= ctxt.getPackageName() %>.impl;

import <%= ctxt.getPackageName() %>.*;
import <%= ctxt.getPackageName() %>.service.*;
import <%= ctxt.getPackageName() %>.domain.*;
import <%= ctxt.getPackageName() %>.model.*;
import java.util.*;
import com.google.common.collect.Lists;
import com.porpoise.dao.database.DbConnectionFactory;
import com.porpoise.dao.database.IDbTransaction;

/**
 * 
 */
public class <%= n %>ServiceImpl extends AbstractDaoService implements I<%= n %>AccessorService
{
    private final <%= n %>Dao dao;
    /**
     *
     */
    public <%= n %>ServiceImpl(final DbConnectionFactory factory)
    {
        super(factory);
        this.dao = new <%= n %>Dao();
    }

    /**
     * @return an iterable of all IDs for the given type
     */
    public Iterable<<%= ctxt.getIdField().getJavaTypeName() %>> listAllKeys()
    {
		final IDbTransaction tx = getFactory().startNewTransaction();
		Iterable<Integer> result;
		try {
			result = this.dao.listAllKeys(tx);
		} finally {
			tx.close();
		}
		return result;
    }
    
    /**
     * @return an object for the given key
     */
    public I<%= n %> get(final <%= ctxt.getIdField().getJavaTypeName() %> id)
    {
    		final IDbTransaction tx = getFactory().startNewTransaction();
		I<%= n %> value = null;
		try {
			final <%= n %>Dto dto = this.dao.findById(tx, id);
			value = new <%= n %>(
			<%= ctxt.getAccessorMethods("dto") %>
			);
		} finally {
			tx.close();
		}
		return value;
	}
    
    /**
     * @return an object for the given key
     */
    public Collection<I<%= n %>> getAll(final Collection<<%= ctxt.getIdField().getJavaTypeName() %>> keys)
    {
        return Lists.newArrayList();
    }
}
