<%@ jet package="com.porpoise.dao.generator.templates" imports="com.porpoise.generator.* java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.*" class="AbstractDaoServiceTemplate" 
skeleton="generator.skeleton" %><% final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>
package <%= ctxt.getPackageName() %>.impl;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.Collection;

import com.google.common.collect.Lists;
import <%= ctxt.getPackageName() %>.AbstractSingleIdDao;
import <%= ctxt.getPackageName() %>.assembler.DomainObjects;
import com.porpoise.dao.database.DbConnectionFactory;
import com.porpoise.dao.database.IDbTransaction;

/**
 * Functional Data Access class used to operate on <%= n %>Dto objects
 * @param DAO the dao type
 */
abstract class AbstractDaoService<K, T, DAO extends AbstractSingleIdDao<K, ?>>
{
    private final DbConnectionFactory connectionFactory;
    private final DAO dao;

	private static final DomainObjects objects = new DomainObjects();

	protected DomainObjects getDomainObjects() {
		// use the global cache
		return objects;
	}

    /**
     *
     */
    public AbstractDaoService(final DbConnectionFactory factory, final DAO daoInstance)
    {
        this.connectionFactory = checkNotNull(factory);
        this.dao = checkNotNull(daoInstance);
    }
    
    /**
     * @return the DAO object
     */
    protected DAO getDao()
    {
        return this.dao;
    }
    
    /**
     * @return the DbConnectionFactory 
     */
    protected DbConnectionFactory getFactory()
    {
        return this.connectionFactory;
    }


    /**
     * @return an iterable of all IDs for the given type
     */
    public Iterable<K> listAllKeys()
    {
		final IDbTransaction tx = getFactory().startNewTransaction();
		Iterable<K> result;
		try {
			result = getDao().listAllKeys(tx);
		} finally {
			tx.close();
		}
		return result;
    }
    
    protected abstract T getInternal(final K id, final IDbTransaction tx);
    
    /**
     * @return an object for the given key
     */
    public T get(final K id)
    {
        final IDbTransaction tx = getFactory().startNewTransaction();
		final T value;
		try {
			value = getInternal(id, tx);
		} finally {
			tx.close();
		}
		return value;
	}
    
    /**
     * @return the objects for the given key
     */
    public Collection<T> getAll(final Collection<K> keys)
    {
		final Collection<T> results = Lists
				.newArrayListWithExpectedSize(keys.size());
		for (final K key : keys) {
			final T next = get(key);
			results.add(next);
		}
		return results;
    }

	/**
	 * @return the total number of <%= n %> objects in the database
	 */
	public int count() {
		final IDbTransaction tx = getFactory().startNewTransaction();
		try {
			return getDao().count(tx);
		} finally {
			tx.close();
		}
	}
}
