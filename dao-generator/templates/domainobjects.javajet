<%@ jet package="com.porpoise.dao.generator.templates" imports="com.porpoise.generator.* java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.* com.porpoise.generator.model.* com.porpoise.dao.generator.model.api.*" class="DomainObjectsTemplate" 
skeleton="generator.skeleton" %><% final 
DomainObjectContext ctxt = (DomainObjectContext) argument; 
%>
package <%= ctxt.getPackageName() %>.assembler;


import com.google.common.collect.Collections2;
import java.util.concurrent.ConcurrentMap;
import java.util.*;

import com.google.common.base.Function;
import com.google.common.collect.MapMaker;
import <%= ctxt.getPackageName() %>.*;
import <%= ctxt.getPackageName() %>.domain.*;
import <%= ctxt.getPackageName() %>.model.*;
import com.porpoise.dao.database.IDbTransaction;

/**
 * An assembler class used to assemble/retrieve domain objects
 */
public class DomainObjects {

<%
for (final ApiContext t : ctxt.getTableContextsWithIds())
{
%>
	private final ConcurrentMap<FindKey<<%= t.getIdType() %>>, I<%= t.getJavaName() %>> <%= t.getPropertyName() %>ById;
<% } %>

    /**
     * default constructor
     */
	public DomainObjects() {
	    final int concurrencyLevel = 1;
<%
for (final ApiContext t : ctxt.getTableContextsWithIds())
{
    final String k = t.getIdType();
    final String n = t.getJavaName();
    final String p = t.getPropertyName();
%>
        // =============================================================================
        // <%= t.getJavaName() %>
        // =============================================================================
        {
            final Function<FindKey<<%= k %>>, I<%= t.getJavaName() %>> computingFunction = new Function<FindKey<Integer>, I<%= n %>>() {
			@Override
			public I<%= n %> apply(final FindKey<Integer> from) {
				final IDbTransaction transaction = from.getTx();
				final <%= k %> id = from.getKey();
				return load<%= n %>(transaction, id);
			}

		    };
            <%= t.getPropertyName() %>ById = new MapMaker().concurrencyLevel(concurrencyLevel).makeComputingMap(computingFunction);
        }

<% } // end for %>
	}

<%
for (final ApiContext t : ctxt.getTableContextsWithIds())
{
    final String k = t.getIdType();
    final String n = t.getJavaName();
    final String p = t.getPropertyName();
%>

	protected I<%= n %> load<%= n %>(final IDbTransaction transaction,
			final Integer id) {
		final <%= n %>Dao <%= p %>Dao = new <%= n %>Dao();
		final <%= n %>Dto dto = <%= p %>Dao.findById(transaction, id);



// ===================== single fields ============================ 
<% for (final IField field : t.getDomainObject().getSingleFields()) 
{
   final String decl = t.getDeclarationForField(field);
   final boolean requiresLoad = field instanceof DomainObjectField;
%>
//== <%= field %> [<%= field.getClass().getSimpleName() %>]== is complex? 
<%= decl %> = <%
    if (requiresLoad) {
        final DomainObjectField dof = (DomainObjectField)field;
        final String idAccessor = dof.getType().getIdField().getNameAsAccessor();
    %> 
       <%= dof.getNameAsAccessor() %>(dto.<%= idAccessor %>(), transaction);
    <% } else { // primitive %>
       dto.<%= field.getNameAsAccessor() %>();
    <% } // end if primitive %>
<% }// end for single fields %>

// ===================== list fields ============================ 
<% for (final IField field : t.getDomainObject().getListFields()) 
{
   final DomainObjectField dof = (DomainObjectField)field;
   if (!dof.hasId())
   {
%>
//No ID!
<%
       continue;
   }
   final String decl = t.getDeclarationForField(field);
   final String coll = field.getNameAsProperty()  + "DtoCollection";
   final String type = field.getJavaTypeName();
   final String dto  = field.getJavaTypeName() + "Dto";
   final String pkId = field.getNameAsAccessor();
   final Field id = t.getDomainObject().getIdField();
%>
//== <%= field %> (name=<%= field.getJavaName() %>, type=<%= field.getJavaTypeName()%>) : dof id=<%= dof.getId() %>, type is...
/* <%= t.getDomainObject()%> */
// id: <%= t.getIdType() %>
// id type name: <%= t.getDomainObject().getIdTypeName() %>
// id field: <%= id %>
// id as accessor: <%= dof.getIdAsAccessor()%>
		final Collection<<%= dto %>> <%= coll %> = new <%= type %>Dao()
			.findBy<%= id.getJavaName() %>(transaction, <%= id.getNameAsProperty() %>);
<%= decl %> = Collections2.transform(
			<%= coll %>, new Function<<%= dto %>, I<%= type %>>() {
				@Override
				public I<%= type %> apply(final <%= dto %> from) {
					return get<%= type %>(from.<%= dof.getIdAsAccessor()%>(), transaction);
				}
		});
		
<% }// end for single fields %>


		final I<%= n %> value = new <%= n %>(<%= t.getDeclarationVariables() %>);

		return value;
	}

    /**
     * @return the I<%= n %> for the given Id 
     */
	public I<%= n %> get<%= n %>(final <%= k %> id, final IDbTransaction tx) {
		return <%= t.getPropertyName() %>ById.get(new FindKey<<%= k %>>(id, tx));
	}
<% } // end for %>

}
