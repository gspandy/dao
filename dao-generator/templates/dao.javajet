<%@ jet package="com.porpoise.dao.generator.templates" imports="com.porpoise.generator.* java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.*" class="DaoTemplate" 
skeleton="generator.skeleton" %><% final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>
package <%= ctxt.getPackageName() %>;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;
import java.util.Date;
import java.util.Collection;

import <%= ctxt.getPackageName() %>.model.<%= n %>Dto;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.porpoise.dao.database.IDbTransaction;
import com.porpoise.dao.database.DbConnectionFactory;
import com.porpoise.dao.database.dao.AbstractDao;
import com.porpoise.dao.database.visitors.AbstractResultSetVisitor;
import com.porpoise.dao.database.visitors.SingleScalarResultVisitor;

/**
 * Functional Data Access class used to operate on <%= n %>Dto objects
 */
public class <%= n %>Dao extends AbstractDao
{
    /**
     * This 'visitor' is able to transform ResultSets into <%= n %>Dto instances 
     */
    private static class Visitor extends AbstractResultSetVisitor {
        
        private final List<<%= n %>Dto> dtoResults;

        public Visitor()
        {
            this.dtoResults = Lists.newArrayList();
        }
        
        @Override
        public boolean onResultSet(final ResultSet resultSet) throws SQLException
        {
            int columnIndex = 1;

<% for (final Column c : ctxt.getColumns()) { %>
            final <%= c.getJavaTypeName() %> <%= ctxt.asProperty(c.getName()) %> = <%= c.getResultSetAccessorName() %>(resultSet, columnIndex++);
<%} // end for %>

            final <%= n %>Dto dto  = new <%= n %>Dto(<%=  ctxt.getParameterList() %>);
            this.dtoResults.add(dto);
            return true;
        }

        /**
         * @return the results as a DTO object
         */
        public List<<%= n %>Dto> getDtoResults()
        {
            return ImmutableList.copyOf(this.dtoResults);
        }

        /**
         * convenience method used when only a single <%= n %>Dto entry was expected
         * @return the single <%= n %>Dto instance 
         * @throws NoSuchElementException if no results were returned
         * @throws IllegalArgumentException if multiple results were returned
         */
        public <%= n %>Dto getSingleResult()
        {
            return Iterables.getOnlyElement(this.dtoResults);
        }
    }
    
<% if (ctxt.hasIdField()) { %>
    /**
     * @param transaction the transaction used to retrieve the object
     * @param id the Id for the <%= n %> object
     * @return the <%= n %> object with the given ID
     */
    public <%= n %>Dto findById(final IDbTransaction transaction, final <%= ctxt.getIdField().getJavaTypeName() %> id)
    {
        final String querySql = <%= n %>Sql.byId();
        final Visitor visitor = transaction.executeQuery(new Visitor(), querySql, id);
        return visitor.getSingleResult();
    }

    /**
     * @return the next available ID
     */
	public <%= ctxt.getIdField().getJavaTypeName() %> nextId(final IDbTransaction transaction) {
	    final <%= ctxt.getIdField().getJavaTypeName() %> max = transaction.executeQuery(new SingleScalarResultVisitor(),
				<%= n %>Sql.selectMaxId()).get<%= ctxt.getIdField().getJavaTypeName() %>();
	    if (max == null)
	    {
            return <%= ctxt.getIdField().getJavaTypeName() %>.valueOf(1);
	    }
		return <%= ctxt.getIdField().getJavaTypeName() %>.valueOf(max + 1);
	}
	
<% } %>

<% for (final Reference r : ctxt.getReferencesToThisTable()) { %>

    /**
     * @param transaction the transaction used to retrieve the object
     * @param id the Id for the <%= n %> object
     * @return the <%= n %> object with the given ID
     */
    public Collection<<%= n %>Dto> findBy<%= ctxt.getReferenceName(r) %>(
    final IDbTransaction transaction, final <%= r.getFromTablePrimaryKey().getJavaTypeName() %> id)
    {
        final String sql = <%= n %>Sql.findBy<%= ctxt.getReferenceName(r) %>();
        final Visitor visitor = transaction.executeQuery(new Visitor(), sql, id);
        return visitor.getDtoResults();
    }

<% } %>
    

    /**
     * @param transaction the transaction used to retrieve the object
     * @return all <%= n %> objects
     */
    public Collection<<%= n %>Dto> listAll(final IDbTransaction transaction)
    {
        final String querySql = <%= n %>Sql.select();
        final Visitor visitor = transaction.executeQuery(new Visitor(), querySql);
        return visitor.getDtoResults();
    }

    /** 
     * create a new entry for the given dto
     * @param transaction
     * @param dto the dto to insert
     */
    public void insert(final IDbTransaction transaction, final <%= n %>Dto dto)
    {
        final String sql = <%= n %>Sql.insert();
        transaction.executeUpdate(sql, <%= ctxt.getAccessorMethods("dto") %>); 
    }    

<% if (ctxt.hasIdField()) { %>
    /** 
     * @param transaction
     * @param id the ID of the element to update
     * @param dto
     */
    public <T> void update(final IDbTransaction transaction, T id, final <%= n %>Dto dto)
    {
        final String sql = <%= n %>Sql.update() + " WHERE id=?";
        transaction.executeUpdate(sql, <%= ctxt.getAccessorMethods("dto") %>, id); 
    }    
<% } %>
}
