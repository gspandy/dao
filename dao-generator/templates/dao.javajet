<%@ jet package="com.porpoise.dao.generator.templates" imports="java.util.* com.porpoise.dao.generator.gen.* com.porpoise.dao.generator.model.*" class="DaoTemplate" 
skeleton="generator.skeleton" %>

<% final DaoContext ctxt = (DaoContext) argument; 
final String n = ctxt.getJavaName();
%>

package <%= ctxt.getPackageName() %>;

import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import <%= ctxt.getPackageName() %>.model.<%= n %>Dto;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.porpoise.dao.database.DbConnectionFactory;
import com.porpoise.dao.database.dao.AbstractDao;
import com.porpoise.dao.database.visitors.AbstractResultSetVisitor;

/**
 * Functional Data Access class for <%= n %>Dto objects
 */
public class <%= n %>Dao extends AbstractDao
{
    
    private static class Visitor extends AbstractResultSetVisitor {
        
        private final List<<%= n %>Dto> dtoResults;

        public Visitor()
        {
            this.dtoResults = Lists.newArrayList();
        }
        
        @Override
        public boolean onResultSet(final ResultSet resultSet) throws SQLException
        {
            int columnIndex = 1;

<% for (final Column c : ctxt.getColumns()) { %>
            final <%= c.getJavaTypeName() %> <%= ctxt.asProperty(c.getName()) %> = get<%= c.getJavaTypeName() %>(resultSet, columnIndex++);
<%} // end for %>

            final <%= n %>Dto dto  = new <%= n %>Dto(<%=  ctxt.getColumnParameterList() %>);
            this.dtoResults.add(dto);
            return true;
        }

        /**
         * @return the dtoResults
         */
        public List<<%= n %>Dto> getDtoResults()
        {
            return ImmutableList.copyOf(this.dtoResults);
        }

        public <%= n %>Dto getSingleResult()
        {
            return Iterables.getOnlyElement(this.dtoResults);
        }
        
    }
    
    /**
     * @param factory
     * @param id
     * @return
     */
    public <%= n %>Dto findById(final DbConnectionFactory factory, final Long id)
    {
        final String querySql = <%= n %>Sql.byId();
        final Visitor visitor = factory.executeQueryInSingleTransaction(new Visitor(), querySql, id);
        return visitor.getSingleResult();
    }
    
    /** 
     * @param factory
     * @param dto
     */
    public void insert(final DbConnectionFactory factory, final <%= n %>Dto dto)
    {
        final String sql = <%= n %>Sql.insert();
        factory.executeInSingleTransaction(sql, <%= ctxt.getColumnAccessorMethods("dto") %>); 
    }    
    
    /** 
     * @param factory
     * @param dto
     */
    public void update(final DbConnectionFactory factory, final <%= n %>Dto dto)
    {
        final String sql = <%= n %>Sql.update();
        factory.executeInSingleTransaction(sql, <%= ctxt.getColumnAccessorMethods("dto") %>); 
    }    
}
